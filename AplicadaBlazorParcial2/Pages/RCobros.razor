@page "/Cobros"

@page "/Cobros/{CobroId:int}"
@inject IToastService toast 

<div class="shadow-lg p-3 mb-5 bg-white rounded">

    <EditForm Model="cobro" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <div class="card">

            <div class="card-header">
                <h3>Registro de Cobro</h3>
            </div>

            <div class="card-body">
                <form>
                    <div class="form-row align-items-center">
                        <div class="col">
                            <div class="form-group">
                                <label>Id</label>
                                <div class="input-group">
                                    <InputNumber @bind-Value="this.CobroId" class="form-control" />
                                    <div class="input-group-append">
                                        <button type="button" style="z-index:0" class="btn btn-secondary" @onclick="Buscar">Buscar</button>
                                    </div>
                                    <ValidationMessage For="@(() => cobro.CobroId)" />
                                </div>
                            </div>
                        </div>
                    </div>

                    @*Fecha*@
                    <div class="form-group">
                        <label>Fecha</label>
                        <InputDate @bind-Value="cobro.Fecha" class="form-control" />
                        <ValidationMessage For="@(() => cobro.Fecha)" />
                    </div>

                </form>

                @*Cliente*@
                <div class="form-group">
                    <label>Clientes</label>
                    <select @bind="cobro.ClienteId" class="form-control" @onblur="ObtenerVentasPendientes">
                        <option value="0" disabled selected>Seleccione un cliente</option>
                        @foreach (var item in ClienteList)
                        {
                            <option value="@item.ClienteId">@item.Nombres</option>
                        }
                    </select>
                </div>


            </div>
        </div>

        <div class="card">
            <div class="card-body">
                <div class="table-responsive text-nowrap" style="position: relative; height:200px; overflow: auto; display: block;">
                    <table class="table table-striped">
                        <thead class="thead-light">
                            <tr>
                                <th>ID</th>
                                <th>Fecha</th>
                                <th>Monto</th>
                                <th>Balance</th>
                                <th>Cobrado</th>
                                <th>Pagar</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white">

                            @foreach (var item in cobro.cobrosDetalles)
                            {
                                <tr>
                                    <td>@item.VentaId</td>
                                    <td>@item.Venta.Fecha.ToString("dd/MM/yyyy")</td>
                                    <td>@item.Venta.Monto.ToString("N2")</td>
                                    <td>@item.Venta.Balance.ToString("N2")</td>
                                    <td>@item.Cobrado.ToString("N2")</td>
                                    <td> <input type="checkbox" @onchange="@(() => Cobrar(item))" /> </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

            </div>


            <div class=" form-group form-inline">
                <div class="form-group col-6">
                    <label>Totales</label>
                    <span class="form-control">@cobro.cobrosDetalles.Count()</span>
                </div>

                <div class="form-group col-6">
                    <label>Cobro Total</label>
                    <InputNumber @bind-Value="cobro.Cobro" class="form-control" readOnly="true" />
                    <ValidationMessage For="@(() => cobro.Cobro)" />
                </div>
            </div>

            <div class="form-group ">
                <label>Observaciones</label>
                <textarea @bind="cobro.Observacion" class="form-control" row="5" placeholder="Observacion" />
            </div>

            <div class="card-footer">
                <div class="form-group text-center">
                    <div class="form-group text-center">
                        <button type="button" class="btn btn-primary" @onclick="Nuevo">Nuevo</button>
                        <button type="submit" class="btn btn-success">Guardar</button>
                        <button type="button" class="btn btn-danger" @onclick="Eliminar">Eliminar</button>
                    </div>
                </div>
            </div>

        </div>
    </EditForm>

</div>


@code {

    [Inject]
    public ClientesBLL clientesBLL { get; set; }

    [Inject]
    public CobrosBLL cobrosBLL { get; set; }

    [Inject]
    public VentasBLL ventasBLL { get; set; }

    Cobros cobro = new Cobros();

    List<Clientes> ClienteList = new List<Clientes>();
    List<CobrosDetalles> VentaList = new List<CobrosDetalles>();

    [Parameter]
    public int CobroId { get; set; }


    protected override void OnInitialized()
    {
        Nuevo();
    }

    private void Nuevo()
    {
        /*cobro = new Cobros();
        ClienteList = clientesBLL.GetList(c => true);
        VentaList = new List<CobrosDetalles>();
        cobro.Fecha = DateTime.Now;*/
        Limpiar();
    }

    private async void Guardar()
    {
        
        cobro.CobroId = this.CobroId;
        if (await cobrosBLL.Guardar(cobro))
        {
            toast.ShowSuccess("Guardado.");
            Limpiar();
        }
        else
        {
            toast.ShowError("No se pudo guardar exitosamente");
        }

    }

    private async void Buscar()
    {
        var cobro = await cobrosBLL.Buscar(this.CobroId);
        cobro.cobrosDetalles = await ventasBLL.GetVentasPagada(cobro.ClienteId);

        if (cobro != null)
        {
            this.cobro = cobro;
        }
        else
        {
            toast.ShowInfo("Este cobro no existe");
        }

    }

    private async void Eliminar()
    {

        if (await cobrosBLL.Eliminar(this.CobroId))
        {
            toast.ShowSuccess("Eliminado");
            Limpiar();
        }
        else
        {
            toast.ShowError("Error al eliminar el registro.");
        }
    }

    private void Cobrar(CobrosDetalles cobroDetalle)
    {
        if (cobroDetalle.Cobrado == 0)
        {
            cobroDetalle.Cobrado = cobroDetalle.Venta.Balance;
            cobro.Cobro += cobroDetalle.Cobrado;
        }
        else
        {
            cobroDetalle.Cobrado = 0;
            cobro.Cobro -= cobroDetalle.Venta.Balance;
        }
    }

    private void Limpiar()
    {
        this.cobro = new Cobros();
        this.CobroId = 0;
    }

    private async Task ObtenerVentasPendientes()
    {
        if (cobro.CobroId == 0)
            cobro.cobrosDetalles = await ventasBLL.GetVentasPorPagar(cobro.ClienteId);
    }

}
